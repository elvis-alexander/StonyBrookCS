
<!-- saved from url=(0131)https://blackboard.stonybrook.edu/bbcswebdav/pid-4043040-dt-content-rid-26699484_1/courses/1174-CSE-214-SEC02-42662/hw4%283%29.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><style type="text/css">@import url('https://themes.googleusercontent.com/fonts/css?kit=cGvuclDC_Z1vE_cnVEU6Ae_NZQ7StBcqH_vXVqoPMX0');.lst-kix_mo774gk87j9d-0>li:before{content:"\0025cf  "}.lst-kix_mo774gk87j9d-1>li:before{content:"\0025cb  "}.lst-kix_mo774gk87j9d-2>li:before{content:"\0025a0  "}ul.lst-kix_fduro5j2d8hg-4{list-style-type:none}.lst-kix_mo774gk87j9d-3>li:before{content:"\0025cf  "}.lst-kix_mo774gk87j9d-4>li:before{content:"\0025cb  "}ul.lst-kix_fduro5j2d8hg-3{list-style-type:none}.lst-kix_5y5k5tod9hw6-1>li{counter-increment:lst-ctn-kix_5y5k5tod9hw6-1}ul.lst-kix_fduro5j2d8hg-2{list-style-type:none}ul.lst-kix_fduro5j2d8hg-1{list-style-type:none}ul.lst-kix_fduro5j2d8hg-0{list-style-type:none}ul.lst-kix_oidx9jr13yvq-1{list-style-type:none}.lst-kix_t8o3of4204bd-8>li:before{content:"\0025a0  "}ul.lst-kix_oidx9jr13yvq-0{list-style-type:none}.lst-kix_5y5k5tod9hw6-2>li{counter-increment:lst-ctn-kix_5y5k5tod9hw6-2}.lst-kix_t8o3of4204bd-7>li:before{content:"\0025cb  "}.lst-kix_8lzf2aku9ku4-5>li:before{content:"\0025a0  "}.lst-kix_t8o3of4204bd-5>li:before{content:"\0025a0  "}.lst-kix_t8o3of4204bd-6>li:before{content:"\0025cf  "}.lst-kix_8lzf2aku9ku4-3>li:before{content:"\0025cf  "}.lst-kix_8lzf2aku9ku4-4>li:before{content:"\0025cb  "}.lst-kix_5y5k5tod9hw6-1>li:before{content:"" counter(lst-ctn-kix_5y5k5tod9hw6-1,lower-latin) ". "}.lst-kix_t8o3of4204bd-0>li:before{content:"\0025cf  "}.lst-kix_t8o3of4204bd-1>li:before{content:"\0025cb  "}ol.lst-kix_5y5k5tod9hw6-1{list-style-type:none}ol.lst-kix_5y5k5tod9hw6-2{list-style-type:none}.lst-kix_5y5k5tod9hw6-0>li:before{content:"" counter(lst-ctn-kix_5y5k5tod9hw6-0,decimal) ". "}ol.lst-kix_5y5k5tod9hw6-0{list-style-type:none}.lst-kix_5y5k5tod9hw6-4>li:before{content:"" counter(lst-ctn-kix_5y5k5tod9hw6-4,lower-latin) ". "}ol.lst-kix_5y5k5tod9hw6-4.start{counter-reset:lst-ctn-kix_5y5k5tod9hw6-4 0}ol.lst-kix_5y5k5tod9hw6-5{list-style-type:none}.lst-kix_8lzf2aku9ku4-6>li:before{content:"\0025cf  "}ol.lst-kix_5y5k5tod9hw6-6{list-style-type:none}.lst-kix_t8o3of4204bd-4>li:before{content:"\0025cb  "}ol.lst-kix_5y5k5tod9hw6-3{list-style-type:none}ol.lst-kix_5y5k5tod9hw6-4{list-style-type:none}.lst-kix_5y5k5tod9hw6-5>li:before{content:"" counter(lst-ctn-kix_5y5k5tod9hw6-5,lower-roman) ". "}.lst-kix_8lzf2aku9ku4-7>li:before{content:"\0025cb  "}.lst-kix_8lzf2aku9ku4-8>li:before{content:"\0025a0  "}.lst-kix_t8o3of4204bd-2>li:before{content:"\0025a0  "}.lst-kix_t8o3of4204bd-3>li:before{content:"\0025cf  "}ol.lst-kix_5y5k5tod9hw6-7{list-style-type:none}.lst-kix_5y5k5tod9hw6-6>li:before{content:"" counter(lst-ctn-kix_5y5k5tod9hw6-6,decimal) ". "}ol.lst-kix_5y5k5tod9hw6-8{list-style-type:none}ul.lst-kix_uyls82go2c77-7{list-style-type:none}ul.lst-kix_uyls82go2c77-8{list-style-type:none}ul.lst-kix_uyls82go2c77-3{list-style-type:none}ul.lst-kix_uyls82go2c77-4{list-style-type:none}ul.lst-kix_uyls82go2c77-5{list-style-type:none}ul.lst-kix_uyls82go2c77-6{list-style-type:none}ol.lst-kix_5y5k5tod9hw6-1.start{counter-reset:lst-ctn-kix_5y5k5tod9hw6-1 0}.lst-kix_5y5k5tod9hw6-3>li:before{content:"" counter(lst-ctn-kix_5y5k5tod9hw6-3,decimal) ". "}.lst-kix_5y5k5tod9hw6-2>li:before{content:"" counter(lst-ctn-kix_5y5k5tod9hw6-2,lower-roman) ". "}.lst-kix_oidx9jr13yvq-0>li:before{content:"\0025cf  "}ul.lst-kix_mo774gk87j9d-0{list-style-type:none}ul.lst-kix_mo774gk87j9d-6{list-style-type:none}ul.lst-kix_t8o3of4204bd-1{list-style-type:none}ul.lst-kix_mo774gk87j9d-5{list-style-type:none}.lst-kix_oidx9jr13yvq-8>li:before{content:"\0025a0  "}ul.lst-kix_t8o3of4204bd-0{list-style-type:none}ul.lst-kix_mo774gk87j9d-8{list-style-type:none}ul.lst-kix_mo774gk87j9d-7{list-style-type:none}ul.lst-kix_mo774gk87j9d-2{list-style-type:none}ul.lst-kix_t8o3of4204bd-5{list-style-type:none}ul.lst-kix_mo774gk87j9d-1{list-style-type:none}.lst-kix_oidx9jr13yvq-6>li:before{content:"\0025cf  "}.lst-kix_oidx9jr13yvq-7>li:before{content:"\0025cb  "}.lst-kix_5y5k5tod9hw6-3>li{counter-increment:lst-ctn-kix_5y5k5tod9hw6-3}ul.lst-kix_t8o3of4204bd-4{list-style-type:none}ul.lst-kix_mo774gk87j9d-4{list-style-type:none}ul.lst-kix_t8o3of4204bd-3{list-style-type:none}ul.lst-kix_mo774gk87j9d-3{list-style-type:none}ul.lst-kix_t8o3of4204bd-2{list-style-type:none}.lst-kix_5y5k5tod9hw6-6>li{counter-increment:lst-ctn-kix_5y5k5tod9hw6-6}ul.lst-kix_t8o3of4204bd-8{list-style-type:none}ul.lst-kix_t8o3of4204bd-7{list-style-type:none}ul.lst-kix_t8o3of4204bd-6{list-style-type:none}.lst-kix_mo774gk87j9d-7>li:before{content:"\0025cb  "}.lst-kix_mo774gk87j9d-8>li:before{content:"\0025a0  "}.lst-kix_oidx9jr13yvq-1>li:before{content:"\0025cb  "}ol.lst-kix_5y5k5tod9hw6-3.start{counter-reset:lst-ctn-kix_5y5k5tod9hw6-3 0}ul.lst-kix_fduro5j2d8hg-8{list-style-type:none}.lst-kix_mo774gk87j9d-5>li:before{content:"\0025a0  "}.lst-kix_mo774gk87j9d-6>li:before{content:"\0025cf  "}.lst-kix_oidx9jr13yvq-2>li:before{content:"\0025a0  "}.lst-kix_oidx9jr13yvq-3>li:before{content:"\0025cf  "}ul.lst-kix_fduro5j2d8hg-7{list-style-type:none}ul.lst-kix_fduro5j2d8hg-6{list-style-type:none}ul.lst-kix_fduro5j2d8hg-5{list-style-type:none}.lst-kix_oidx9jr13yvq-4>li:before{content:"\0025cb  "}.lst-kix_oidx9jr13yvq-5>li:before{content:"\0025a0  "}.lst-kix_5y5k5tod9hw6-0>li{counter-increment:lst-ctn-kix_5y5k5tod9hw6-0}ul.lst-kix_8lzf2aku9ku4-5{list-style-type:none}ul.lst-kix_8lzf2aku9ku4-6{list-style-type:none}ul.lst-kix_8lzf2aku9ku4-3{list-style-type:none}ul.lst-kix_z6olvamjf8bm-7{list-style-type:none}ul.lst-kix_8lzf2aku9ku4-4{list-style-type:none}ul.lst-kix_z6olvamjf8bm-8{list-style-type:none}.lst-kix_szyq47ftc9sq-0>li:before{content:"\0025cf  "}ul.lst-kix_8lzf2aku9ku4-1{list-style-type:none}ul.lst-kix_z6olvamjf8bm-5{list-style-type:none}.lst-kix_5y5k5tod9hw6-7>li{counter-increment:lst-ctn-kix_5y5k5tod9hw6-7}ul.lst-kix_8lzf2aku9ku4-2{list-style-type:none}ul.lst-kix_z6olvamjf8bm-6{list-style-type:none}ol.lst-kix_5y5k5tod9hw6-5.start{counter-reset:lst-ctn-kix_5y5k5tod9hw6-5 0}ul.lst-kix_z6olvamjf8bm-3{list-style-type:none}ul.lst-kix_8lzf2aku9ku4-0{list-style-type:none}ul.lst-kix_z6olvamjf8bm-4{list-style-type:none}.lst-kix_z6olvamjf8bm-2>li:before{content:"\0025a0  "}.lst-kix_z6olvamjf8bm-3>li:before{content:"\0025cf  "}.lst-kix_szyq47ftc9sq-2>li:before{content:"\0025a0  "}.lst-kix_z6olvamjf8bm-4>li:before{content:"\0025cb  "}.lst-kix_szyq47ftc9sq-1>li:before{content:"\0025cb  "}ol.lst-kix_5y5k5tod9hw6-2.start{counter-reset:lst-ctn-kix_5y5k5tod9hw6-2 0}.lst-kix_5y5k5tod9hw6-8>li{counter-increment:lst-ctn-kix_5y5k5tod9hw6-8}.lst-kix_uyls82go2c77-0>li:before{content:"\0025cf  "}.lst-kix_z6olvamjf8bm-1>li:before{content:"\0025cb  "}.lst-kix_z6olvamjf8bm-0>li:before{content:"\0025cf  "}ul.lst-kix_8lzf2aku9ku4-7{list-style-type:none}ul.lst-kix_8lzf2aku9ku4-8{list-style-type:none}.lst-kix_uyls82go2c77-8>li:before{content:"\0025a0  "}ul.lst-kix_szyq47ftc9sq-8{list-style-type:none}ul.lst-kix_szyq47ftc9sq-7{list-style-type:none}ul.lst-kix_szyq47ftc9sq-6{list-style-type:none}ul.lst-kix_szyq47ftc9sq-5{list-style-type:none}.lst-kix_uyls82go2c77-7>li:before{content:"\0025cb  "}ul.lst-kix_szyq47ftc9sq-4{list-style-type:none}ul.lst-kix_szyq47ftc9sq-3{list-style-type:none}ul.lst-kix_szyq47ftc9sq-2{list-style-type:none}ul.lst-kix_szyq47ftc9sq-1{list-style-type:none}ul.lst-kix_szyq47ftc9sq-0{list-style-type:none}.lst-kix_uyls82go2c77-1>li:before{content:"\0025cb  "}ol.lst-kix_5y5k5tod9hw6-8.start{counter-reset:lst-ctn-kix_5y5k5tod9hw6-8 0}.lst-kix_szyq47ftc9sq-6>li:before{content:"\0025cf  "}.lst-kix_szyq47ftc9sq-8>li:before{content:"\0025a0  "}.lst-kix_uyls82go2c77-2>li:before{content:"\0025a0  "}.lst-kix_szyq47ftc9sq-3>li:before{content:"\0025cf  "}.lst-kix_szyq47ftc9sq-7>li:before{content:"\0025cb  "}.lst-kix_uyls82go2c77-3>li:before{content:"\0025cf  "}ul.lst-kix_z6olvamjf8bm-1{list-style-type:none}ul.lst-kix_z6olvamjf8bm-2{list-style-type:none}ul.lst-kix_z6olvamjf8bm-0{list-style-type:none}.lst-kix_szyq47ftc9sq-4>li:before{content:"\0025cb  "}.lst-kix_uyls82go2c77-4>li:before{content:"\0025cb  "}.lst-kix_uyls82go2c77-6>li:before{content:"\0025cf  "}.lst-kix_szyq47ftc9sq-5>li:before{content:"\0025a0  "}.lst-kix_uyls82go2c77-5>li:before{content:"\0025a0  "}ol.lst-kix_5y5k5tod9hw6-0.start{counter-reset:lst-ctn-kix_5y5k5tod9hw6-0 0}ol.lst-kix_5y5k5tod9hw6-7.start{counter-reset:lst-ctn-kix_5y5k5tod9hw6-7 0}ul.lst-kix_uyls82go2c77-0{list-style-type:none}ul.lst-kix_uyls82go2c77-1{list-style-type:none}ul.lst-kix_uyls82go2c77-2{list-style-type:none}.lst-kix_5y5k5tod9hw6-4>li{counter-increment:lst-ctn-kix_5y5k5tod9hw6-4}.lst-kix_5y5k5tod9hw6-5>li{counter-increment:lst-ctn-kix_5y5k5tod9hw6-5}.lst-kix_fduro5j2d8hg-0>li:before{content:"\0025cf  "}.lst-kix_5y5k5tod9hw6-7>li:before{content:"" counter(lst-ctn-kix_5y5k5tod9hw6-7,lower-latin) ". "}.lst-kix_5y5k5tod9hw6-8>li:before{content:"" counter(lst-ctn-kix_5y5k5tod9hw6-8,lower-roman) ". "}.lst-kix_fduro5j2d8hg-7>li:before{content:"\0025cb  "}.lst-kix_8lzf2aku9ku4-1>li:before{content:"\0025cb  "}.lst-kix_8lzf2aku9ku4-2>li:before{content:"\0025a0  "}.lst-kix_fduro5j2d8hg-6>li:before{content:"\0025cf  "}.lst-kix_fduro5j2d8hg-8>li:before{content:"\0025a0  "}.lst-kix_fduro5j2d8hg-3>li:before{content:"\0025cf  "}ul.lst-kix_oidx9jr13yvq-8{list-style-type:none}ul.lst-kix_oidx9jr13yvq-7{list-style-type:none}.lst-kix_fduro5j2d8hg-2>li:before{content:"\0025a0  "}ul.lst-kix_oidx9jr13yvq-6{list-style-type:none}ul.lst-kix_oidx9jr13yvq-5{list-style-type:none}.lst-kix_fduro5j2d8hg-1>li:before{content:"\0025cb  "}.lst-kix_8lzf2aku9ku4-0>li:before{content:"\0025cf  "}ul.lst-kix_oidx9jr13yvq-4{list-style-type:none}ul.lst-kix_oidx9jr13yvq-3{list-style-type:none}ul.lst-kix_oidx9jr13yvq-2{list-style-type:none}.lst-kix_z6olvamjf8bm-6>li:before{content:"\0025cf  "}.lst-kix_z6olvamjf8bm-5>li:before{content:"\0025a0  "}.lst-kix_z6olvamjf8bm-7>li:before{content:"\0025cb  "}.lst-kix_fduro5j2d8hg-4>li:before{content:"\0025cb  "}.lst-kix_z6olvamjf8bm-8>li:before{content:"\0025a0  "}.lst-kix_fduro5j2d8hg-5>li:before{content:"\0025a0  "}ol.lst-kix_5y5k5tod9hw6-6.start{counter-reset:lst-ctn-kix_5y5k5tod9hw6-6 0}ol{margin:0;padding:0}table td,table th{padding:0}.c29{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Times New Roman";font-style:normal}.c4{color:#6aa84f;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Consolas";font-style:normal}.c3{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c1{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Consolas";font-style:normal}.c8{color:#ff0000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Consolas";font-style:normal}.c16{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c22{color:#800000;text-decoration:none;vertical-align:baseline;font-size:18pt;font-family:"Arial";font-style:normal}.c11{padding-top:0pt;padding-bottom:0pt;line-height:1.2545454545454544;orphans:2;widows:2;text-align:center}.c24{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:center}.c17{color:#000000;text-decoration:none;vertical-align:baseline;font-size:13.5pt;font-family:"Arial";font-style:normal}.c21{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Consolas";font-style:normal}.c20{color:#000000;text-decoration:none;vertical-align:baseline;font-size:18pt;font-family:"Times New Roman";font-style:normal}.c28{color:#38761d;text-decoration:none;vertical-align:baseline;font-family:"Arial";font-style:normal}.c26{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial"}.c23{color:#000000;text-decoration:none;vertical-align:baseline;font-family:"Arial";font-style:normal}.c19{padding-top:14pt;padding-bottom:4pt;line-height:1.15;text-align:left}.c33{color:#000000;text-decoration:none;vertical-align:baseline;font-family:"Arial"}.c30{padding-top:0pt;padding-bottom:4pt;line-height:1.15;text-align:center}.c18{padding-top:18pt;padding-bottom:4pt;line-height:1.15;text-align:center}.c25{background-color:#ffffff;max-width:648pt;padding:72pt 72pt 72pt 72pt}.c13{font-weight:400;font-family:"Consolas"}.c2{padding:0;margin:0}.c5{margin-left:72pt;padding-left:0pt}.c7{margin-left:108pt;padding-left:0pt}.c31{color:#800080;text-decoration:underline}.c27{color:inherit;text-decoration:inherit}.c10{margin-left:36pt;padding-left:0pt}.c9{font-weight:700}.c14{font-size:12pt}.c15{color:#ff0000}.c12{font-style:italic}.c32{color:#6aa84f}.c6{height:11pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}</style></head><body class="c25"><h2 class="c30" id="h.8mqe3rca4rin"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 216.00px; height: 107.56px;"><img alt="Description: http://www.cs.sunysb.edu/~cse214/images/logo.gif" src="./hw4%283%29_files/logo.gif" style="width: 216.00px; height: 107.56px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span><span class="c9 c20">&nbsp; </span></h2><h2 class="c18" id="h.4c4hrseutpvq"><span class="c9 c22">HOMEWORK - SPRING 2017</span></h2><hr><p class="c6 c11"><span class="c29"></span></p><h3 class="c19" id="h.4zo2vkqwgpb5"><span class="c9 c17">HOMEWORK 4 - due Tuesday, March 21st no later than 6:00pm</span></h3><p class="c0"><span class="c16 c9">REMINDERS:</span></p><ul class="c2 lst-kix_mo774gk87j9d-0 start"><li class="c0 c10"><span class="c9 c14">Be sure your code follows the </span><span class="c31 c9 c14"><a class="c27" href="https://www.google.com/url?q=http://www.cs.sunysb.edu/~cse214/codingstyle.htm&amp;sa=D&amp;ust=1489432676896000&amp;usg=AFQjCNF2myzjED8l1JP3EZwr3kC0X6tADg">coding style</a></span><span class="c23 c9 c14">&nbsp;for CSE214.</span></li><li class="c0 c10"><span class="c9 c14">Make sure you read the warnings about </span><span class="c9 c14 c31"><a class="c27" href="https://www.google.com/url?q=http://www.cs.sunysb.edu/~cse214/courseinfo.htm&amp;sa=D&amp;ust=1489432676897000&amp;usg=AFQjCNF34ymw3hapcpsJCMQmCJp2TnUdDg">academic dishonesty</a></span><span class="c9 c14">. </span><span class="c9 c14 c12 c33">Remember, all work you submit for homework assignments MUST be entirely your own work. Also, group efforts are not allowed.</span></li><li class="c0 c10"><span class="c9 c14">Login to your </span><span class="c31 c9 c14"><a class="c27" href="https://www.google.com/url?q=http://facdev02.cs.stonybrook.edu:8080/grade.Login&amp;sa=D&amp;ust=1489432676898000&amp;usg=AFQjCNGhKBIFCytL3vINaqPMcIkWpWDopw">grading account</a></span><span class="c23 c9 c14">&nbsp;and click "Submit Assignment" to upload and submit your assignment.</span></li><li class="c0 c10"><span class="c9 c14 c28">You are allowed to use any built-in Java API Data Structure classes to implement this assignment except where noted.</span></li><li class="c0 c10"><span class="c23 c9 c14">You may use Scanner, InputStreamReader, or any other class that you wish for keyboard input.</span></li></ul><p class="c0 c6"><span class="c9 c14 c23"></span></p><p class="c0"><span class="c3">It's halfway through the semester, and you've realized that going to professor office hours can be a great idea. Unfortunately, your professor seems to be teaching literally every single class offered to undergrads, and the office hours line seems longer than at an Apple launch event in mid-2012. In order to optimize your waiting time, you've decided to build some software that models what the line at the professor's office looks like. You know that this professor gives priority to students with a higher class number over students with a lower class number, and that the probability of students showing up at any given minute for a particular class is inversely proportional to the amount of time left until the next exam or homework due date for the class. Depending on the amount of coffee the professor has had that morning, visits can last between a minimum and maximum number of minutes. You will be writing a simulation that takes as input a number of courses, their numbers, the probability of a student arriving at any given minute for that course, a minimum and maximum visit time, and a number of minutes office hours as input (each student will be assigned a number of minutes their question takes to answer). Additionally, there will be a number of TAs helping the professor (the TAs will take the next student with the highest course number, just like the professor, but will spend twice as long as the professor answering questions). You will be outputting a minute by minute simulation of the office hours line. </span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c9">Simulation Procedure</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c3">The primary simulation procedure should be contained within a static function called simulate() inside the OfficeHourSimulator class. This method should begin by initializing the Office Hours based on a few parameters (listed below), and enter a loop which executes the time steps.</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span>Your program will simulate the arrival of students in up to </span><span class="c9">numCourses</span><span class="c3">&nbsp;classes for a specified simulation time. The simulation will take 8 parameters at the onset:</span></p><p class="c0 c6"><span class="c3"></span></p><ol class="c2 lst-kix_5y5k5tod9hw6-0 start" start="1"><li class="c0 c10"><span class="c9">numCourses (int)</span><span class="c3">: indicates the number of courses.</span></li><li class="c0 c10"><span class="c9">courseNumbers (int [])</span><span>: the course numbers for the courses indicated in </span><span class="c9">numCourses</span><span>. The number of courseNumbers needed will depend on the variable </span><span class="c9">numCourses</span><span class="c3">. You should create an array of Courses using these given ints.</span></li></ol><ul class="c2 lst-kix_oidx9jr13yvq-0 start"><li class="c0 c5"><span class="c15">Note:</span><span class="c3">&nbsp;You should sort these numbers in either decreasing or increasing order to help with calculating the course difficulties.</span></li></ul><ol class="c2 lst-kix_5y5k5tod9hw6-0" start="3"><li class="c0 c10"><span class="c9">arrivalProbability (double [])</span><span>: indicates the probability that a Student will arrive to office hours. </span><span class="c12">Each course has a separate arrival probability, due to exam stress variances. </span></li><li class="c0 c10"><span class="c9">minTime (int)</span><span class="c3">: the minimum time (in minutes) each student’s visit could last.</span></li><li class="c0 c10"><span class="c9">maxTime (int)</span><span class="c3">: the maximum time (in minutes) each student’s visit could last.</span></li><li class="c0 c10"><span class="c9">numCups (int)</span><span>: the number of cups of coffee the professor drank that morning. This variable will affect the </span><span class="c9">timeLeftTilFree</span><span>&nbsp;variables in that each cup of coffee will decrease the </span><span class="c9">timeLeftTilFree</span><span>&nbsp;variable by 1 minute. </span><span class="c15">Note</span><span class="c3">: the initial timeLeftTilFree value should never go past 1 minute, no matter how many cups of coffee the professor has had that morning, he still won’t be able to answer the question in 0 minutes.</span></li><li class="c0 c10"><span class="c9">officeHourTime</span><span>&nbsp;</span><span class="c9">(int)</span><span class="c3">: indicates the desired total simulation time. </span></li><li class="c0 c10"><span class="c9">numTAs (int)</span><span class="c3">: the number of TAs working in parallel with the professor. TAs take twice as long as the professor to help students, and they are too poor to afford decent coffee, so th<br>eir speed is not modified by numCups.</span></li></ol><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c9">Initialization</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span>Before the first time step, your program should create a new array of Courses equal in size to the number of courses specified in the parameter numCourses passed in at the onset. A new Course should be created at each index of this new array, initializing each new Course with their courseNumber (as well as courseDifficulty after sorting all the courses by their numbers). Additionally, Helpers should be initialized based on the value of numTAs. There should always be one professor initialized and TAs initialized accordingly. The value of timeLeftTilFree for the Helpers will depend on what the values of minTime, maxTime, and numCups are. It will also depend on whether or not the Helper is a TA or a professor. Lastly, a BooleanSource object should be created for each Course (</span><span class="c12">initializing its probability member variable to the corresponding arrivalProbability</span><span>) which will be used to determine if Students have arrived during simulation.</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0 c6"><span class="c16 c9"></span></p><p class="c0 c6"><span class="c16 c9"></span></p><p class="c0"><span class="c9">Time Steps</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span>On each time step, the program should determine if a Student has arrived at office hours. This can be accomplished by calling the occurs() method on the BooleanSource object for each Course. If a Student has arrived (</span><span class="c12">i.e. occurs() returns true</span><span class="c3">), the program should create a new Student object, initialize its timeArrived member variable to the current time step value, and enqueue the Student onto the StudentQueue. </span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c3">After the StudentQueue has been considered for arrival, each Helper should be checked if their timeLeftTilFree is equal to 0 or not. If that is true, that specific Helper should allow a Student to be dequeued from the StudentQueue and then add the time the Student requires to the Helper’s timeLeftTilFree variable.</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c3">After these operations have been completed, the simulation should output the current state of the office hours to the user. This should include the Students waiting, as well as their current wait times. In addition, the current total wait time, total number of Students, and average wait time should be shown for each Course as well as the whole StudentQueue. The program now proceeds to the next time step, repeating the process until the time step value is equal to officeHourTime.</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c9">Finalization</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span>Once the time step counter reaches officeHourTime, no more Students should arrive at the professor’s office hours. </span><span class="c32">The simulation should proceed as normal until all Students have been cleared from the StudentQueue.</span><span class="c3">&nbsp;Once the StudentQueue is clear of Students, the simulation should end and the program should display the results to the user. The output parameters should include the total wait time by all Students, the total number of Students that came to office hours, and the average wait time for Students during the simulation. These output parameters should also print for each Course. </span></p><hr><p class="c0 c6"><span class="c3"></span></p><p class="c24"><span class="c9">Required Classes</span></p><p class="c24 c6"><span class="c3"></span></p><p class="c0"><span class="c9">BooleanSource</span></p><p class="c0"><span class="c3">Write a fully documented class named BooleanSource which abstracts a random occurrence generator. This class should be constructed with an initial arrival probability (0.0 &lt;= probability &lt;= 1.0) which represents the likelihood that a Student will arrive at the office hours at the beginning of each time step. This method should also contain a single method, occurs() which returns true if a Student arrives and false if not.</span></p><ul class="c2 lst-kix_fduro5j2d8hg-0 start"><li class="c0 c10"><span class="c3">private double probability</span></li><li class="c0 c10"><span class="c3">public BooleanSource (double initProbability)</span></li></ul><ul class="c2 lst-kix_fduro5j2d8hg-1 start"><li class="c0 c5"><span class="c3">Constructor which initalizes the probability to the indicated parameter.</span></li><li class="c0 c5"><span class="c3">Preconditions:</span></li></ul><ul class="c2 lst-kix_fduro5j2d8hg-2 start"><li class="c0 c7"><span class="c3">0 &lt; initProbability &lt;=1.</span></li></ul><ul class="c2 lst-kix_fduro5j2d8hg-1"><li class="c0 c5"><span class="c3">Throws:</span></li></ul><ul class="c2 lst-kix_fduro5j2d8hg-2 start"><li class="c0 c7"><span class="c3">IllegalArgumentException if initProbability &lt;= 0 or initProbability &gt; 1.</span></li></ul><ul class="c2 lst-kix_fduro5j2d8hg-0"><li class="c0 c10"><span class="c3">public boolean occurs()</span></li></ul><ul class="c2 lst-kix_fduro5j2d8hg-1 start"><li class="c0 c5"><span class="c3">Method which returns true with the probability indicated by the member variable probability.</span></li><li class="c0 c5"><span class="c3">Preconditions:</span></li></ul><ul class="c2 lst-kix_fduro5j2d8hg-2 start"><li class="c0 c7"><span class="c3">probability is a valid probability (0 &lt; initProbability &lt;=1).</span></li></ul><ul class="c2 lst-kix_fduro5j2d8hg-1"><li class="c0 c5"><span class="c3">Returns boolean value indicating whether an event has occured or not.</span></li><li class="c0 c5"><span class="c15">Note:</span><span class="c3">&nbsp;this method should utilize Math.random() to generate the random occurrence.</span></li></ul><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c9">Student</span></p><p class="c0"><span class="c3">Write a fully documented class named Student. This class represents a Student which goes to the professor’s office hours. Each instance must contain the studentId (the first Student to arrive at office hours is studentId 1, the second Student to arrive is studentId 2, the n’th student to arrive will have studentId n), the time the Student arrived (int), and the Course the Student is in. The Student must be initialized with a studentId, Course, and the time the Student arrived. The student counter is static and stores the number of Students that have arrived at the professor’s office hours so far. It is the only variable that is modifiable.</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span>The Student class itself is actually immutable. This means once it has been constructed, no data within the instance can be changed (</span><span class="c12">the static studentCounter can and should be incremented on each constructor call</span><span class="c3">). However, data can still be read via the getter methods.</span></p><ul class="c2 lst-kix_8lzf2aku9ku4-0 start"><li class="c0 c10"><span class="c3">private static int studentCounter = 0</span></li><li class="c0 c10"><span class="c3">private int studentId</span></li><li class="c0 c10"><span class="c3">private int timeArrived</span></li><li class="c0 c10"><span class="c3">private int timeRequired</span></li></ul><ul class="c2 lst-kix_8lzf2aku9ku4-1 start"><li class="c0 c5"><span class="c3">should be a random int between the minTime and maxTime passed in during the onset, generated at time of construction. You should not adjust for coffee cups or TA, this will be done when the student is dequeued.</span></li></ul><ul class="c2 lst-kix_8lzf2aku9ku4-0"><li class="c0 c10"><span class="c3">private Course course</span></li><li class="c0 c10"><span class="c3">public Student(int initTimeArrived, Course course, int timeRequired)</span></li></ul><ul class="c2 lst-kix_8lzf2aku9ku4-1 start"><li class="c0 c5"><span class="c3">Default constructor. You should automatically increment the studentCounter, set the studentId to its new value, and set the timeRequired to the value generated.</span></li><li class="c0 c5"><span class="c3">Preconditions:</span></li></ul><ul class="c2 lst-kix_8lzf2aku9ku4-2 start"><li class="c0 c7"><span class="c3">initTimeArrived &gt; 0.</span></li><li class="c0 c7"><span class="c3">course’s field courseNumber exists in the given courseNumbers.</span></li></ul><ul class="c2 lst-kix_8lzf2aku9ku4-1"><li class="c0 c5"><span class="c3">Throws:</span></li></ul><ul class="c2 lst-kix_8lzf2aku9ku4-2 start"><li class="c0 c7"><span class="c3">IllegalArgumentException if initTimeArrived &lt;= 0, or if courseNumber does not exist in the given courseNumbers.</span></li></ul><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c9">Course</span></p><p class="c0"><span class="c3">Write a fully documented class named Course. This class represents a course which is offered at the university. Each instance must contain a courseNumber (int) and a courseDifficulty (int). The course difficulty will depend on how many courses that were passed at the onset. The way the value of courseDifficulty will be determined will depend on how many courses there are and the course numbers. The lowest course number will receive a course difficulty of 0, the second lowest course number will receive a course difficulty of 1, the third lowest course number will receive a course difficulty of 2, etc. </span></p><ul class="c2 lst-kix_szyq47ftc9sq-0 start"><li class="c0 c10"><span class="c3">private int courseNumber</span></li><li class="c0 c10"><span class="c3">private int courseDifficulty</span></li><li class="c0 c10"><span class="c3">private double arrivalProbability</span></li><li class="c0 c10"><span class="c3">public Course(int courseNumber, double arrivalProbability) </span></li></ul><ul class="c2 lst-kix_szyq47ftc9sq-1 start"><li class="c0 c5"><span class="c3">Default constructor that creates a Course with the given course number and arrival probability.</span></li><li class="c0 c5"><span class="c15">Note: </span><span class="c3">You should set the value of the courseDifficulty member variable after you have sorted all the Courses by their course numbers.</span></li><li class="c0 c5"><span class="c3">Preconditions:</span></li></ul><ul class="c2 lst-kix_szyq47ftc9sq-2 start"><li class="c0 c7"><span class="c3">courseNumber exists in the given courseNumbers. </span></li></ul><ul class="c2 lst-kix_szyq47ftc9sq-1"><li class="c0 c5"><span class="c3">Throws:</span></li></ul><ul class="c2 lst-kix_szyq47ftc9sq-2 start"><li class="c0 c7"><span class="c3">IllegalArgumentException if courseNumber does not exist in the given courseNumbers.</span></li></ul><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c9">Helper</span></p><p class="c0"><span class="c3">Write a fully documented class named Helper. This class represents someone who helps the Students at the office hours whether it be a professor or TA. Each instance must contain the timeLeftTilFree (int) and isProfessor (boolean) variables. The value of the timeLeftTilFree member variable will be determined based on the value of the parameter timeRequired, which in turn is based on minTime and maxTime passed in during the onset of the simulation. Additionally, whether or not the Helper is a professor will also affect how long the Helper takes to answer the Student’s questions. If the Helper is a TA (isProfessor == false), then the time it takes the Helper to answer the Student’s question will be two times as long. Lastly, when the timeLeftTilFree member variable is equal to 0, that means the Helper is now free to service another Student and you should now dequeue another Student from the StudentQueue. For a professor you should adjust timeLeftTillFree by subtracting the number of coffee cups from timeRequired, and for a TA you should multiply it by two.</span></p><ul class="c2 lst-kix_z6olvamjf8bm-0 start"><li class="c0 c10"><span class="c3">private int timeLeftTilFree</span></li><li class="c0 c10"><span class="c3">private final boolean isProfessor</span></li><li class="c0 c10"><span class="c3">public Helper(boolean isProfessor)</span></li></ul><ul class="c2 lst-kix_z6olvamjf8bm-1 start"><li class="c0 c5"><span class="c3">Default constructor that creates a Helper that could be either a professor or a TA. If the value of isProfessor is false, then the Helper is a TA. Inversely, if the value of isProfessor is true, then the Helper is a professor. When the Helper object is instantiated, you should initialize the timeLeftTilFree variable to 0.</span></li><li class="c0 c5"><span class="c3">Postconditions:</span></li></ul><ul class="c2 lst-kix_z6olvamjf8bm-2 start"><li class="c0 c7"><span class="c3">timeLeftTilFree = 0.</span></li></ul><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c9">StudentQueue</span></p><p class="c0"><span class="c3">The line of students outside the professor’s office in our simulator will be modelled as a Priority Queue of Students. In this homework, the order in which Students will be serviced will depend on their priority, which in this case will be the course number they require the Helper’s help with. No matter how you decide to implement the Priority Queue, you should always keep the Students sorted in decreasing order based on their course number and the order they arrived at the office hours.</span></p><ul class="c2 lst-kix_t8o3of4204bd-0 start"><li class="c0 c10"><span class="c3">public StudentQueue()</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-1 start"><li class="c0 c5"><span class="c3">Default constructor that creates an empty StudentQueue. This priority queue should be maintained in decreasing order based on the Student’s respective course numbers.</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-0"><li class="c0 c10"><span class="c3">public void enqueue(Student s)</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-1 start"><li class="c0 c5"><span class="c3">Enqueues the passed in Student into the specified StudentQueue.</span></li><li class="c0 c5"><span class="c3">Preconditions:</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-2 start"><li class="c0 c7"><span class="c3">The StudentQueue object should be instantiated.</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-1"><li class="c0 c5"><span class="c3">Postconditions:</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-2 start"><li class="c0 c7"><span class="c3">Given that the Student specified was not null, the Student should be added to the proper position of the StudentQueue.</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-0"><li class="c0 c10"><span class="c3">public Student dequeue()</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-1 start"><li class="c0 c5"><span class="c3">Dequeues the first Student in the StudentQueue. </span></li><li class="c0 c5"><span class="c3">Returns the Student dequeued.</span></li><li class="c0 c5"><span class="c3">Preconditions:</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-2 start"><li class="c0 c7"><span class="c3">The first Student in the StudentQueue should have the highest course number as well as have arrived first with respect to the rest of the Student’s in the same course.</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-0"><li class="c0 c10"><span class="c3">public int size()</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-1 start"><li class="c0 c5"><span class="c3">Returns the current number of Students waiting in the StudentQueue.</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-0"><li class="c0 c10"><span class="c3">public boolean isEmpty()</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-1 start"><li class="c0 c5"><span class="c3">Checks if the specified StudentQueue is empty. </span></li><li class="c0 c5"><span class="c3">Returns true if the StudentQueue is empty, else false.</span></li><li class="c0 c5"><span class="c3">Preconditions:</span></li></ul><ul class="c2 lst-kix_t8o3of4204bd-2 start"><li class="c0 c7"><span class="c3">The StudentQueue object should be instantiated.</span></li></ul><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c15">Note: if you decide to use a Java API class to implement StudentQueue, you must use inheritance (extend a Java API class) to simplify the class definition.</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c9">OfficeHourSimulator</span></p><p class="c0"><span>Write a fully documented class named OfficeHourSimulator. This class represents the manager of the simulation -- it does the heavy lifting: The main function’s responsibility is to get the parameters for the simulation and pass them to the simulate method by reading from a file. You will read the 7 parameters for the simulation through a text file, each parameter on one line. The parameter will be described in text, followed by a colon, and the value. In the event that there are multiple parameters per line, they will be space separated. You may feel free to use a scanner, or String methods such as split and substring to separate the parameters. You </span><span class="c9">may </span><span>assume that the format of the text file will be correct and that all input </span><span class="c9">types</span><span class="c3">&nbsp;will be correct. However, you should still account for semantic errors. Here is an example of what a sample text file could look like:</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c3">number of courses:3</span></p><p class="c0"><span class="c3">course numbers:219 214 114</span></p><p class="c0"><span>arrival probabilities:0.4 0.6 0.8</span></p><p class="c0"><span>min time:</span><span class="c3">2</span></p><p class="c0"><span class="c3">max time:4</span></p><p class="c0"><span class="c3">num cups:1</span></p><p class="c0"><span class="c3">simulation time:50</span></p><p class="c0"><span class="c3">number of tas:2</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c3">The order the numbers in the text file coming in will be the same as the order specified in the description at the beginning of the assignment (first being numCourses, second being courseNumbers, third being arrivalProbability, fourth being minTime, fifth being maxTime, sixth being numCups, seventh being officeHrTime, and eighth numTAs). </span></p><ul class="c2 lst-kix_uyls82go2c77-0 start"><li class="c0 c10"><span class="c3">public static void main(String args[])</span></li></ul><ul class="c2 lst-kix_uyls82go2c77-1 start"><li class="c0 c5"><span class="c3">Start for application, asks users for input file, which contains the following variables: numCourses (int), courseNumbers (int []), arrivalProbability (double []), minTime (int), maxTime (int), numCups (int), officeHrTime (int), numTAs (int). This method should also create the array of Courses with the given courseNumbers.</span></li></ul><ul class="c2 lst-kix_uyls82go2c77-0"><li class="c0 c10"><span class="c3">public static void simulate(int officeHrTime, double[] arrivalProbability, Course[] courses, int minTime, int maxTime, int numCups, int numTAs)</span></li></ul><ul class="c2 lst-kix_uyls82go2c77-1 start"><li class="c0 c5"><span class="c3">This method does the actual simulation. This method actually implements the algorithm described above, using the BooleanSource and StudentQueue classes.</span></li><li class="c0 c5"><span class="c15">Note:</span><span class="c3">&nbsp;The officeHrTime is how long Students can ‘arrive’ at office hours. The actual simulation can last longer -- long enough for every Student to get their questions answered.</span></li></ul><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c15">Warning:</span><span>&nbsp;You should make sure that you catch </span><span class="c9">ALL </span><span>exceptions that you throw anywhere in your code. Exceptions are used to indicate illegal or unsupported operations so that your program can handle unexpected events gracefully and prevent a crash. Your program should </span><span class="c9">NOT </span><span>crash from any of the above exceptions (</span><span class="c12">it should not crash from any exception,but especially not one that you throw yourself</span><span class="c3">).</span></p><hr><p class="c0 c6"><span class="c3"></span></p><p class="c24"><span class="c16 c9">General Recommendations</span></p><p class="c0"><span class="c3">You might want to implement a toString() method for classes to make debugging and printing easier. You do not have to do this, but it will help you.</span></p><p class="c0 c6"><span class="c3"></span></p><p class="c0"><span class="c3">You can feel free to add extra methods and variables if you need.</span></p><hr><p class="c0 c6"><span class="c3"></span></p><p class="c24"><span class="c9">Output Format</span></p><p class="c0"><span class="c3">All lists must be printed in a nice and tabular form as shown in the sample output. You may use C style formatting as shown in the following example. The example below shows two different ways of displaying the name and address at pre-specified positions 21, 26, 19, and 6 spaces wide. If the ‘-’ flag is given, then it will be left-justified (padding will be on the right), else the region is right-justified. The ‘s’ identifier is for strings, the ‘d’ identifier is for integers. Giving the additional ‘0’ flag pads an integer with additional zeroes in front.</span></p><p class="c0"><span class="c3">&nbsp; &nbsp; </span></p><p class="c0"><span class="c3">&nbsp; &nbsp; String name = "Doe Jane";<br> &nbsp; &nbsp;String address = "32 Bayview Dr.";<br> &nbsp; &nbsp;String city = "Fishers Island, NY";<br> &nbsp; &nbsp;int zip = 6390;<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;System.out.println(String.format("%-21s%-26s%19s%06d", name, address, city, zip));<br> &nbsp; &nbsp;System.out.printf("%-21s%-26s%19s%06d", name, address, city, zip);<br><br> &nbsp; // Output<br> &nbsp; &nbsp;Doe Jane &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 32 Bayview Dr. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Fishers Island, NY 06390<br> &nbsp; &nbsp;Doe Jane &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 32 Bayview Dr. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Fishers Island, NY 06390</span></p><hr><p class="c0 c6"><span class="c3"></span></p><p class="c24"><span class="c9">Sample Input/Output</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c24"><span class="c1">Welcome to the Office Hours Simulation.</span></p><p class="c0"><span class="c13">Please enter a file name:</span><span class="c8">mysimulation.txt</span></p><p class="c0"><span class="c1">File mysimulation.txt loaded.</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Course &nbsp; &nbsp; Probability</span></p><p class="c0"><span class="c1">-----------------------</span></p><p class="c0"><span class="c1">219 &nbsp; &nbsp; &nbsp; &nbsp;.4</span></p><p class="c0"><span class="c1">214 &nbsp; &nbsp; &nbsp; &nbsp;.6</span></p><p class="c0"><span class="c1">114 &nbsp; &nbsp; &nbsp; &nbsp;.8</span></p><p class="c0"><span class="c1">Number of TAs: 2</span></p><p class="c0"><span class="c1">Coffee cups: 1</span></p><p class="c0"><span class="c1">Base time interval 2-4 minutes.</span></p><p class="c0"><span class="c1">Time: 50 minutes.</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Begin simulation:</span></p><p class="c0"><span class="c1">__________________________________________________</span></p><p class="c0"><span class="c1">Time Step 1:</span></p><p class="c0"><span class="c1">No students have arrived for 219. </span></p><p class="c0"><span class="c1">Student 1 has arrived for 214 requiring 3 minutes.</span></p><p class="c0"><span class="c1">Student 2 has arrived for 114 requiring 2 minutes.</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Professor is helping Student 1, 2 minutes remaining.</span></p><p class="c0"><span class="c1">TA 1 is helping Student 2, 4 minutes remaining.</span></p><p class="c0"><span class="c1">TA 2 is waiting for the next student to arrive. </span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Student Queue:</span></p><p class="c0"><span class="c1">ID &nbsp; &nbsp; Course &nbsp; &nbsp; Required Time Arrival Time</span></p><p class="c0"><span class="c1">---------------------------------------------</span></p><p class="c0"><span class="c1">[empty]</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">__________________________________________________</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Time Step 2:</span></p><p class="c0"><span class="c1">Student 3 has arrived for 219 requiring 3 minutes.</span></p><p class="c0"><span class="c1">No students have arrived for 214. </span></p><p class="c0"><span class="c1">Student 4 has arrived for 114 requiring 4 minutes.</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Professor is helping Student 1, 1 minute remaining.</span></p><p class="c0"><span class="c1">TA 1 is helping Student 2, 3 minutes remaining.</span></p><p class="c0"><span class="c1">TA 2 is helping Student 3, 6 minutes remaining.</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Student Queue:</span></p><p class="c0"><span class="c1">ID &nbsp; &nbsp; Course &nbsp; &nbsp; Required Time Arrival Time</span></p><p class="c0"><span class="c1">---------------------------------------------</span></p><p class="c0"><span class="c1">4 &nbsp; &nbsp; &nbsp;114 &nbsp; &nbsp; &nbsp; &nbsp;4 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">__________________________________________________</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Time Step 3:</span></p><p class="c0"><span class="c1">Student 5 has arrived for 219 requiring 3 minutes.</span></p><p class="c0"><span class="c1">Student 6 has arrived for 214 requiring 2 minutes.</span></p><p class="c0"><span class="c1">No students have arrived for 114. </span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c13">Professor is helping Student 5, 2 minutes remaining.</span><span class="c4">//this student arrived, was enqueued and dequeued first</span></p><p class="c0"><span class="c1">TA 1 is helping Student 2, 2 minutes remaining.</span></p><p class="c0"><span class="c1">TA 2 is helping Student 3, 5 minutes remaining.</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Student Queue:</span></p><p class="c0"><span class="c1">ID &nbsp; &nbsp; Course &nbsp; &nbsp; Required Time Arrival Time</span></p><p class="c0"><span class="c1">---------------------------------------------</span></p><p class="c0"><span class="c13">6 &nbsp; &nbsp; &nbsp;214 &nbsp; &nbsp; &nbsp; &nbsp;2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3 </span><span class="c13 c32">//this student has higher priority due to higher course number</span></p><p class="c0"><span class="c1">4 &nbsp; &nbsp; &nbsp;114 &nbsp; &nbsp; &nbsp; &nbsp;4 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Student 1 has finished being helped with CSE 214 in 2 minutes since arrival.</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">__________________________________________________</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Time Step 4:</span></p><p class="c0"><span class="c1">Student 7 has arrived for 219 requiring 2 minutes.</span></p><p class="c0"><span class="c1">Student 8 has arrived for 214 requiring 4 minutes.</span></p><p class="c0"><span class="c1">Student 9 has arrived for 114 requiring 3 minutes.</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c13">Professor is helping Student 5, 1 minute remaining.</span></p><p class="c0"><span class="c1">TA 1 is helping Student 2, 1 minute remaining.</span></p><p class="c0"><span class="c1">TA 2 is helping Student 3, 4 minutes remaining.</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Student Queue:</span></p><p class="c0"><span class="c1">ID &nbsp; &nbsp; Course &nbsp; &nbsp; Required Time Arrival Time</span></p><p class="c0"><span class="c1">---------------------------------------------</span></p><p class="c0"><span class="c1">7 &nbsp; &nbsp; &nbsp;219 &nbsp; &nbsp; &nbsp; &nbsp;2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4</span></p><p class="c0"><span class="c13">6 &nbsp; &nbsp; &nbsp;214 &nbsp; &nbsp; &nbsp; &nbsp;2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3 </span></p><p class="c0"><span class="c13">8 &nbsp; &nbsp; &nbsp;214 &nbsp; &nbsp; &nbsp; &nbsp;4 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4</span></p><p class="c0"><span class="c1">4 &nbsp; &nbsp; &nbsp;114 &nbsp; &nbsp; &nbsp; &nbsp;4 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2</span></p><p class="c0"><span class="c1">9 &nbsp; &nbsp; &nbsp;114 &nbsp; &nbsp; &nbsp; &nbsp;3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4</span></p><p class="c0"><span class="c1">__________________________________________________</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Time Step 5:</span></p><p class="c0"><span class="c1">No students have arrived for 219. </span></p><p class="c0"><span class="c1">No students have arrived for 214. </span></p><p class="c0"><span class="c1">No students have arrived for 114. </span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c13">Professor is helping Student 7, 1 minute remaining.</span></p><p class="c0"><span class="c1">TA 1 is helping Student 6, 2 minutes remaining.</span></p><p class="c0"><span class="c1">TA 2 is helping Student 3, 3 minutes remaining.</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Student Queue:</span></p><p class="c0"><span class="c1">ID &nbsp; &nbsp; Course &nbsp; &nbsp; Required Time Arrival Time</span></p><p class="c0"><span class="c1">---------------------------------------------</span></p><p class="c0"><span class="c13">8 &nbsp; &nbsp; &nbsp;214 &nbsp; &nbsp; &nbsp; &nbsp;4 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4</span></p><p class="c0"><span class="c1">4 &nbsp; &nbsp; &nbsp;114 &nbsp; &nbsp; &nbsp; &nbsp;4 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2</span></p><p class="c0"><span class="c1">9 &nbsp; &nbsp; &nbsp;114 &nbsp; &nbsp; &nbsp; &nbsp;3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Student 5 has finished being helped with CSE 219 in 2 minutes since arrival.</span></p><p class="c0"><span class="c1">Student 2 has finished being helped with CSE 114 in 4 minutes since arrival.</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c4">//Time steps 5-50 not shown in Sample I/O</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">__________________________________________________</span></p><p class="c0"><span class="c1">End simulation.</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Statistics:</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c1">Course &nbsp; &nbsp;#StudentsHelped &nbsp; Avg.Time</span></p><p class="c0"><span class="c1">________________________________________</span></p><p class="c0"><span class="c1">Total &nbsp; &nbsp; 37 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;15 min</span></p><p class="c0"><span class="c1">219 &nbsp; &nbsp; &nbsp; 25 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8 min</span></p><p class="c0"><span class="c1">214 &nbsp; &nbsp; &nbsp; 8 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 27 min</span></p><p class="c0"><span class="c13">114 &nbsp; &nbsp; &nbsp; 4 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 35 min </span><span class="c4">//rounded from 34.75 min</span></p><p class="c0 c6"><span class="c4"></span></p><p class="c0"><span class="c1">We hope you have a pleasant visit in your next actual office hours, good bye!</span></p><p class="c0 c6"><span class="c1"></span></p><p class="c0"><span class="c9 c16">Extra Credit:</span></p><p class="c0 c6"><span class="c16 c9"></span></p><p class="c0"><span class="c3">For extra credit, make a GUI that allows both simulations, and manual addition of students, with a course dropdown and input for number of minutes, and manual minute advancements. The professor and TAs should have loading bars to show their progress with the students. Maximum 8 points for JavaFX, and 12 points for Android Studio.</span></p><p class="c0 c6"><span class="c9 c21"></span></p><p class="c0 c6"><span class="c1"></span></p></body></html>